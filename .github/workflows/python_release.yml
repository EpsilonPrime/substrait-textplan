name: Python Package

on:
  release:
    types: [created]
  workflow_dispatch:

env:
  ANTLR_JAR_URL: https://github.com/rrevenantt/antlr4rust/releases/download/antlr4-4.8-2-Rust-0.3.0-beta/antlr4-4.8-2-SNAPSHOT-complete.jar
  ANTLR_JAR_VERSION: antlr4-4.8-2-Rust-0.3.0-beta

jobs:
  build_wheels:
    name: Build Python wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install Java for ANTLR (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y default-jre

      - name: Install Java for ANTLR (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install openjdk@11
      
      - name: Cache ANTLR JAR
        id: cache-antlr
        uses: actions/cache@v3
        with:
          path: build-tools/antlr4-4.8-2-SNAPSHOT-complete.jar
          key: antlr-jar-${{ env.ANTLR_JAR_VERSION }}

      - name: Download ANTLR JAR with Rust support
        if: steps.cache-antlr.outputs.cache-hit != 'true'
        run: |
          mkdir -p build-tools
          curl -L -o build-tools/antlr4-4.8-2-SNAPSHOT-complete.jar ${{ env.ANTLR_JAR_URL }}
          echo "Downloaded ANTLR JAR to build-tools/antlr4-4.8-2-SNAPSHOT-complete.jar"

      - name: Set ANTLR_JAR environment variable
        run: echo "ANTLR_JAR=$(pwd)/build-tools/antlr4-4.8-2-SNAPSHOT-complete.jar" >> $GITHUB_ENV
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      
      - name: Cache cargo dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel setuptools-rust
      
      - name: Build wheels
        run: |
          cd python
          python setup.py bdist_wheel
      
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.python-version }}
          path: python/dist/*.whl
          retention-days: 7

  publish:
    name: Publish Python package
    needs: [build_wheels]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twine
      
      - name: Download all wheels
        uses: actions/download-artifact@v3
        with:
          path: dist
      
      - name: Move wheels to dist directory
        run: |
          mkdir -p dist_all
          find dist -name "*.whl" -exec cp {} dist_all/ \;
      
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          twine upload dist_all/*