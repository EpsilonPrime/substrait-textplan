name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  ANTLR_JAR_URL: https://github.com/rrevenantt/antlr4rust/releases/download/antlr4-4.8-2-Rust-0.3.0-beta/antlr4-4.8-2-SNAPSHOT-complete.jar
  ANTLR_JAR_VERSION: antlr4-4.8-2-Rust-0.3.0-beta

jobs:
  build_and_test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Java for ANTLR (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y default-jre

    - name: Install Java for ANTLR (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install openjdk@11

    - name: Cache ANTLR JAR
      id: cache-antlr
      uses: actions/cache@v3
      with:
        path: build-tools/antlr4-4.8-2-SNAPSHOT-complete.jar
        key: antlr-jar-${{ env.ANTLR_JAR_VERSION }}

    - name: Download ANTLR JAR with Rust support
      if: steps.cache-antlr.outputs.cache-hit != 'true'
      run: |
        mkdir -p build-tools
        curl -L -o build-tools/antlr4-4.8-2-SNAPSHOT-complete.jar ${{ env.ANTLR_JAR_URL }}
        echo "Downloaded ANTLR JAR to build-tools/antlr4-4.8-2-SNAPSHOT-complete.jar"

    - name: Set ANTLR_JAR environment variable
      run: echo "ANTLR_JAR=$(pwd)/build-tools/antlr4-4.8-2-SNAPSHOT-complete.jar" >> $GITHUB_ENV

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache cargo dependencies
      uses: Swatinem/rust-cache@v2

    - name: Build
      run: cargo build --verbose

    - name: Run tests
      run: cargo test --verbose

    - name: Run clippy
      run: cargo clippy --all-features -- -D warnings

    - name: Check formatting
      run: cargo fmt -- --check

  build_release:
    name: Build Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Java for ANTLR (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y default-jre

    - name: Install Java for ANTLR (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install openjdk@11

    - name: Cache ANTLR JAR
      id: cache-antlr
      uses: actions/cache@v3
      with:
        path: build-tools/antlr4-4.8-2-SNAPSHOT-complete.jar
        key: antlr-jar-${{ env.ANTLR_JAR_VERSION }}

    - name: Download ANTLR JAR with Rust support
      if: steps.cache-antlr.outputs.cache-hit != 'true'
      run: |
        mkdir -p build-tools
        curl -L -o build-tools/antlr4-4.8-2-SNAPSHOT-complete.jar ${{ env.ANTLR_JAR_URL }}
        echo "Downloaded ANTLR JAR to build-tools/antlr4-4.8-2-SNAPSHOT-complete.jar"

    - name: Set ANTLR_JAR environment variable
      run: echo "ANTLR_JAR=$(pwd)/build-tools/antlr4-4.8-2-SNAPSHOT-complete.jar" >> $GITHUB_ENV

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}

    - name: Cache cargo dependencies
      uses: Swatinem/rust-cache@v2

    - name: Build in release mode
      run: cargo build --release --verbose

    - name: Upload library artifact (macOS)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v3
      with:
        name: libsubstrait_textplan-macos
        path: |
          target/release/libsubstrait_textplan.dylib
        retention-days: 7

    - name: Upload library artifact (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v3
      with:
        name: libsubstrait_textplan-linux
        path: |
          target/release/libsubstrait_textplan.so
        retention-days: 7